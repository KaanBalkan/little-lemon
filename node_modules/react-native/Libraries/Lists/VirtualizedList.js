import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  Image,
  StyleSheet,
  TouchableOpacity,
} from 'react-native';

const categoriesData = [
  { id: 1, name: 'Starters' },
  { id: 2, name: 'Mains' },
  { id: 3, name: 'Desserts' },
  { id: 4, name: 'Drinks' },
  { id: 5, name: 'Specials' },
];

const CategoryItem = ({ category, onPress }) => {
  const isSelected = category.selected;
  const backgroundColor = isSelected ? '#6e3b6e' : '#f9c2ff';
  const textColor = isSelected ? '#fff' : '#000';

  return (
    <TouchableOpacity style={[styles.item, { backgroundColor }]} onPress={onPress}>
      <Text style={[styles.itemText, { color: textColor }]}>{category.name}</Text>
    </TouchableOpacity>
  );
};

const CategoryList = ({ selectedCategories, onPress }) => {
  const handleCategoryPress = (categoryId) => {
    const updatedSelectedCategories = selectedCategories.includes(categoryId)
      ? selectedCategories.filter(id => id !== categoryId)
      : [...selectedCategories, categoryId];
    onPress(updatedSelectedCategories);
  };

  const renderCategoryItem = ({ item }) => (
    <CategoryItem
      category={{ ...item, selected: selectedCategories.includes(item.id) }}
      onPress={() => handleCategoryPress(item.id)}
    />
  );

  return (
    <FlatList
      data={categoriesData}
      renderItem={renderCategoryItem}
      keyExtractor={(item) => item.id.toString()}
      horizontal
      showsHorizontalScrollIndicator={false}
    />
  );
};

const Home = () => {
  const [menuData, setMenuData] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);

  useEffect(() => {
    const fetchMenuData = async () => {
      try {
        const response = await fetch('https://raw.githubusercontent.com/Meta-Mobile-Developer-PC/Working-With-Data-API/main/capstone.json');
        const json = await response.json();
        setMenuData(json.menu);
      } catch (error) {
        console.error(error);
      }
    };
    fetchMenuData();
  }, []);

  const handleCategoryPress = (updatedSelectedCategories) => {
    setSelectedCategories(updatedSelectedCategories);
  };

  const filteredMenuData = selectedCategories.length
    ? menuData.filter((item) => selectedCategories.includes(item.category.toLowerCase()))
    : menuData;

  const renderItem = ({ item }) => (
    <View style={styles.itemContainer}>
      <View style={styles.itemDetails}>
        <Text style={styles.itemName}>{item.name}</Text>
        <Text style={styles.itemDescription}>{item.description}</Text>
        <Text style={styles.itemPrice}>${item.price.toFixed(2)}</Text>
      </View>
      <Image style={styles.itemImage} source={{ uri: `https://github.com/Meta-Mobile-Developer-PC/Working-With-Data-API/blob/main/images/${item.image}?raw=true` }} />
    </View>
  );


  return (
    <View style={styles.container}>
      <CategoryList
        selectedCategories={selectedCategories}
        onPress={handleCategoryPress}
      />
      <FlatList
        data={filteredMenuData}
        renderItem={renderItem}
        keyExtractor={(item) => item.name}
      />
    </View>
);
};

const styles = StyleSheet.create({
container: {
flex: 1,
backgroundColor: '#fff',
paddingTop: 20,
},
itemContainer: {
flexDirection: 'row',
alignItems: 'center',
marginVertical: 8,
marginHorizontal: 16,
backgroundColor: '#eee',
borderRadius: 8,
padding: 8,
},
itemImage: {
width: 80,
height: 80,
borderRadius: 8,
marginRight: 8,
},
itemDetails: {
flex: 1,
},
itemName: {
fontSize: 16,
fontWeight: 'bold',
},
itemDescription: {
fontSize: 14,
},
itemPrice: {
fontSize: 16,
fontWeight: 'bold',
marginTop: 8,
},
item: {
padding: 10,
marginVertical: 4,
marginHorizontal: 16,
borderRadius: 4,
},
itemText: {
fontSize: 16,
fontWeight: 'bold',
},
});

export default Home;
